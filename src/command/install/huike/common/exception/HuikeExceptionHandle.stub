<?php


namespace huike\common\exception;

use huikedev\huike_base\app_const\NoticeType;
use huikedev\huike_base\exceptions\HuikeException;
use huikedev\huike_base\facade\AppDebug;
use huikedev\huike_base\facade\AppRequest;
use huikedev\huike_base\log\HuikeLog;
use think\Exception;
use think\exception\ErrorException;
use think\exception\Handle;
use think\exception\HttpResponseException;
use think\exception\RouteNotFoundException;
use think\facade\Config;
use think\Response;
use Throwable;

/**
 * Desc
 * Class HuikeExceptionHandle
 * Full \huikedev\huike_base\exception\HuikeExceptionHandle
 * @package huikedev\huike_base\exception
 */
class HuikeExceptionHandle extends Handle
{
    protected $responseData;

    public function report(Throwable $exception): void
    {
        $this->parseLogData($exception);
    }

    public function render($request, \Throwable $e): Response
    {
        if($e instanceof ErrorException){
            return $this->toErrorExceptionJson($e);
        }
        if($e instanceof HttpResponseException && AppRequest::isDebug()){
            return parent::render($request, $e);
        }
        if ($e instanceof RouteNotFoundException) {
            return $this->toDefaultExceptionJson($e);
        }
        if ($e instanceof HuikeException) {
            return $this->toHuikeException($e);
        }
        if ($e instanceof Exception) {
            return $this->toThinkExceptionJson($e);
        }
        return $this->toDefaultExceptionJson($e);
    }

    //应用框架异常
    protected function toHuikeException(HuikeException $e)
    {
        $this->responseData['success'] = false;
        $this->responseData['showType'] = $e->getNoticeType();
        $this->responseData['errorCode'] = $e->getAppCode();
        $this->responseData['errorMessage'] = $e->getAppMsg();
        //异常情况下 不建议返回任何data
        $this->responseData['data'] = empty($e->getAppData()) ? [] : $e->getAppData();
        return $this->toJson($e);
    }

    //其他异常
    protected function toDefaultExceptionJson(\Throwable $e)
    {
        $this->responseData['success'] = false;
        $this->responseData['showType'] = ExceptionConst::NOTICE_TYPE;
        $this->responseData['errorCode'] = $e->getCode();
        $this->responseData['errorMessage'] = AppRequest::isDebug() ? $e->getMessage() : Config::get('app.error_message');
        $this->responseData['data'] = [];
        return $this->toJson($e);
    }

    //TP框架异常
    protected function toThinkExceptionJson(Exception $e)
    {
        $this->responseData['data'] = empty($e->getData()) ? [] : $e->getData();;
        return $this->toDefaultExceptionJson($e);
    }

    protected function toErrorExceptionJson(Exception $e)
    {
        $this->responseData['success'] = false;
        $this->responseData['showType'] = NoticeType::PAGE_ERROR;
        $this->responseData['errorCode'] = $e->getCode();
        $this->responseData['errorMessage'] = AppRequest::isDebug() ? $e->getMessage() : Config::get('app.error_message');
        return $this->toJson($e);
    }


    protected function toJson(\Throwable $e)
    {
        $this->getDebugInfo();
        $this->getTraceInfo($e);
        //return \response($this->responseData);
        return json($this->responseData);
    }

    /*
     * php 8.0可以使用union types合并Exception和Response
     */
    protected function getDebugInfo()
    {
        if (AppRequest::isDebug() === false) {
            return $this;
        }
        AppDebug::remark('huike_end');
        $this->responseData['debug']['time_cost'] = AppDebug::getRangeTime('huike_start', 'huike_end');
        $this->responseData['debug']['mem_cost'] = AppDebug::getRangeMem('huike_start', 'huike_end');
        $this->responseData['debug']['file_load'] = AppDebug::getFile();
        $this->responseData['debug']['req'] = AppDebug::getThroughputRate();
        $this->responseData['debug']['queries'] = app()->db->getQueryTimes();
        $this->responseData['debug']['cache_reads'] = app('cache')->getReadTimes();
        $this->responseData['debug']['cache_writes'] = app('cache')->getWriteTimes();
        $this->responseData['debug']['time_stamp'] = date('Y-m-d H:i:s', time());
        return $this;
    }

    protected function getTraceInfo(\Throwable $e)
    {
        if (AppRequest::isDebug() === false) {
            return $this;
        }
        //默认使用TP框架的traces信息，可根据需求自行扩展
        $this->responseData['traces'] = $this->convertExceptionToArray($e);
        return $this;
    }

    protected function parseLogData(Throwable $e): HuikeExceptionHandle
    {
        HuikeLog::error($e);
        return $this;
    }
}