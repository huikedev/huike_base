<?php


namespace huike\common\exception;

use huikedev\huike_base\exceptions\HuikeException;
use huikedev\huike_base\facade\AppDebug;
use huikedev\huike_base\facade\AppRequest;
use think\Exception;
use think\exception\Handle;
use think\exception\HttpResponseException;
use think\exception\RouteNotFoundException;
use think\facade\Config;
use think\facade\Log;
use think\Response;
use Throwable;

/**
 * Desc
 * Class HuikeExceptionHandle
 * Full \huikedev\huike_base\exception\HuikeExceptionHandle
 * @package huikedev\huike_base\exception
 */
class HuikeExceptionHandle extends Handle
{
    protected $responseData;

    public function report(Throwable $exception): void
    {
        $this->parseLogData($exception);
        //parent::report($exception);
    }

    public function render($request, \Throwable $e): Response
    {
        // 其他错误交给系统处理
//        return parent::render($request, $e);
        if($e instanceof HttpResponseException && AppRequest::isDebug()){
            return parent::render($request, $e);
        }
        if ($e instanceof RouteNotFoundException) {
            return $this->toDefaultExceptionJson($e);
        }
        if ($e instanceof huikeException) {
            return $this->toHuikeException($e);
        }
        if ($e instanceof Exception) {
            return $this->toThinkExceptionJson($e);
        }
        return $this->toDefaultExceptionJson($e);

        // 其他错误交给系统处理
        //return parent::render($request, $e);
    }

    //应用框架异常
    protected function toHuikeException(HuikeException $e)
    {
        $this->responseData['success'] = false;
        $this->responseData['showType'] = $e->getNoticeType();
        $this->responseData['errorCode'] = $e->getAppCode();
        $this->responseData['errorMessage'] = $e->getAppMsg();
        //异常情况下 不建议返回任何data
        $this->responseData['data'] = empty($e->getAppData()) ? [] : $e->getAppData();
        return $this->toJson($e);
    }

    //其他异常
    protected function toDefaultExceptionJson(\Throwable $e)
    {
        $this->responseData['success'] = false;
        $this->responseData['showType'] = Config::get('huike.default_error_notice_type', 4);
        $this->responseData['errorCode'] = $e->getCode();
        $this->responseData['errorMessage'] = AppRequest::isDebug() ? $e->getMessage() : Config::get('app.error_message');
        $this->responseData['data'] = [];
        return $this->toJson($e);
    }

    //TP框架异常
    protected function toThinkExceptionJson(Exception $e)
    {
        $this->responseData['data'] = empty($e->getData()) ? [] : $e->getData();;
        return $this->toDefaultExceptionJson($e);
    }

    protected function toJson(\Throwable $e)
    {
        $this->getDebugInfo();
        $this->getTraceInfo($e);
        return json($this->responseData);
    }

    /*
     * php 8.0可以使用union types合并Exception和Response
     */
    protected function getDebugInfo()
    {
        if (AppRequest::isDebug() === false) {
            return $this;
        }
        AppDebug::remark('huike_end');
        $this->responseData['debug']['time_cost'] = AppDebug::getRangeTime('huike_start', 'huike_end');
        $this->responseData['debug']['mem_cost'] = AppDebug::getRangeMem('huike_start', 'huike_end');
        $this->responseData['debug']['file_load'] = AppDebug::getFile();
        $this->responseData['debug']['req'] = AppDebug::getThroughputRate();
        $this->responseData['debug']['queries'] = app()->db->getQueryTimes();
        $this->responseData['debug']['cache_reads'] = app('cache')->getReadTimes();
        $this->responseData['debug']['cache_writes'] = app('cache')->getWriteTimes();
        $this->responseData['debug']['time_stamp'] = date('Y-m-d H:i:s', time());
        return $this;
    }

    protected function getTraceInfo(\Throwable $e)
    {
        if (AppRequest::isDebug() === false) {
            return $this;
        }
        //默认使用TP框架的traces信息，可根据需求自行扩展
        $this->responseData['traces'] = $this->convertExceptionToArray($e);
        return $this;
    }

    protected function parseLogData(Throwable $e)
    {
        //错误级别判断是否记录日志  是否为Error错误
        if($e instanceof huikeException && $e->getErrorLevel() < Config::get('huike.log_error_level')){
            return $this;
        }
        $logData['controller'] = AppRequest::controller();
        $logData['action'] = AppRequest::action();
        if($e instanceof huikeException){
            $logData['app_error'] = $e->getError();
            $logData['exception']['msg'] =  $e->getAppMsg();
            $logData['exception']['code'] =  $e->getAppCode() ;
            if($e->isLogRequest()){
                $logData['param'] = AppRequest::param();
                $logData['header'] = AppRequest::header();
            }
        }else{
            $logData['exception']['msg'] =  $e->getMessage();
            $logData['exception']['code'] =  $e->getCode() ;
        }

        $logData['exception']['line'] = $e->getLine();
        $logData['exception']['file'] = $e->getFile();
        $logData['exception']['exception'] = get_class($e);
        Log::error($logData);
        return $this;
    }
}